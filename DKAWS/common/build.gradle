apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile "com.android.support:appcompat-v7:${suportCode}"
    compile "com.android.support:recyclerview-v7:${suportCode}"
    compile 'com.yalantis:ucrop:1.3.+'
    compile 'com.bugtags.library:bugtags-lib:latest.integration' 
}

def String baseDir = "./Encryption"
def String baseJni = baseDir + "/jni"
def String baseJava = baseDir + "/java"
def String toDir = "./src/main/jniLibs/armeabi"
task cleanEbcryption() {
    println "echo:clean"
    delete baseDir + '/libs', baseDir + '/obj', toDir + '/libencryption.so', './libs/encryption-1.0.jar'
}

def getGradlePath() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('gradle.properties').newDataInputStream())
    def gradleDir = properties.getProperty('gradle.dir', null)
    if (gradleDir == null)
        throw new GradleException('gradle location not found. Define location with gradle.dir in the gradle.properties file.')

    return gradleDir
}

task ndkbuild() dependsOn cleanEbcryption {
    println ":compile Encryption.so"


    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        def ndkDir = android.ndkDirectory.getAbsolutePath()
        exec {
            //这里编译用的是ndk10e,如果用ndk11b就不可以
            commandLine ndkDir + "/ndk-build", "-C", file(baseJni).absolutePath
        }
    }else if(org.gradle.internal.os.OperatingSystem.current().isLinux()){//
        println file(baseJni).absolutePath;
        exec {
            commandLine "ndk-build" , "-C" , baseJni
        }
    } else {
        exec {
            commandLine "cmd", "/c", "ndk-build -C " + baseJni
        }
    }
    println ":compile Encryption.jar"

    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        exec {
            commandLine getGradlePath() + "/bin/gradle", "--build-file", "./Encryption/java/build.gradle", "compileEncryption"
        }
    }else if(org.gradle.internal.os.OperatingSystem.current().isLinux()){
        exec{
            commandLine "gradle" ,"--build-file" ,   baseJava + "/build.gradle" , "compileEncryption"
        }
    } else {
        exec {
            commandLine "cmd", "/c", "gradle --build-file " + baseJava + "/build.gradle compileEncryption"
        }
    }

}
task copyDataArmeabi(type: Copy, dependsOn: ndkbuild) {
    println ":copy Encryption.so to " + toDir
    from(baseDir + '/libs/armeabi')
    include '*.so'
    into toDir
}



tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn copyDataArmeabi
}